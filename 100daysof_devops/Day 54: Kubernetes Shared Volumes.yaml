We are working on an application that will be deployed on multiple containers within a pod on Kubernetes cluster. There is a requirement to share a volume 
among the containers to save some temporary data. The Nautilus DevOps team is developing a similar template to replicate the scenario. 
Below you can find more details about it.

Create a pod named volume-share-nautilus.
For the first container, use image debian with latest tag only and remember to mention the tag i.e debian:latest, container should be named as 
volume-container-nautilus-1, and run a sleep command for it so that it remains in running state. Volume volume-share should be mounted at path /tmp/official.

For the second container, use image debian with the latest tag only and remember to mention the tag i.e debian:latest, container should be named as 
volume-container-nautilus-2, and again run a sleep command for it so that it remains in running state. Volume volume-share should be mounted at path /tmp/cluster.
Volume name should be volume-share of type emptyDir.
After creating the pod, exec into the first container i.e volume-container-nautilus-1, and just for testing create a file official.txt with any content 
under the mounted path of first container i.e /tmp/official.
The file official.txt should be present under the mounted path /tmp/cluster on the second container volume-container-nautilus-2 as well, since they are 
using a shared volume.
Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.


Step 1: Create the pod manifest

Create a file `/tmp/volume-share-nautilus.yaml` with the following content:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: volume-share-nautilus
spec:
  volumes:
    - name: volume-share
      emptyDir: {}
  containers:
    - name: volume-container-nautilus-1
      image: debian:latest
      command: ["sleep", "3600"]
      volumeMounts:
        - name: volume-share
          mountPath: /tmp/official

    - name: volume-container-nautilus-2
      image: debian:latest
      command: ["sleep", "3600"]
      volumeMounts:
        - name: volume-share
          mountPath: /tmp/cluster

 Step 2: Apply it

kubectl apply -f /tmp/volume-share-nautilus.yaml


Verify pod status:
kubectl get pods

Wait until it shows `Running`.

Step 3: Test the shared volume

Create a file in the first container:

kubectl exec -it volume-share-nautilus -c volume-container-nautilus-1 -- bash -c "echo 'Shared data test' > /tmp/official/official.txt"

Check if the file is visible in the second container:

kubectl exec -it volume-share-nautilus -c volume-container-nautilus-2 -- cat /tmp/cluster/official.txt

You should see the text `Shared data test` — proving the shared volume works.

Step 4: Verify everything

kubectl describe pod volume-share-nautilus | grep -A3 Volumes


You’ll see:

Volumes:
  volume-share:
    Type:       EmptyDir (a temporary directory that shares a pod’s lifetime)
