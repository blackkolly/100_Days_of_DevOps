he Nautilus DevOps team has noticed performance issues in some Kubernetes-hosted applications due to resource constraints. To address this, 
they plan to set limits on resource utilization. Here are the details:
Create a pod named httpd-pod with a container named httpd-container. Use the httpd image with the latest tag (specify as httpd:latest). 
Set the following resource limits:

Requests: Memory: 15Mi, CPU: 100m
Limits: Memory: 20Mi, CPU: 100m
Note: The kubectl utility on jump_host is configured to operate with the Kubernetes cluster.


Step 1: Create a YAML file

Create the pod definition file `/tmp/httpd-pod.yaml`:

apiVersion: v1
kind: Pod
metadata:
  name: httpd-pod
  labels:
    app: httpd_app
spec:
  containers:
  - name: httpd-container
    image: httpd:latest
    resources:
      requests:
        memory: "15Mi"
        cpu: "100m"
      limits:
        memory: "20Mi"
        cpu: "100m"

Step 2: Apply the configuration

kubectl apply -f /tmp/httpd-pod.yaml

Step 3: Verify the pod is running

Check the pod status:

kubectl get pods

View resource settings:
kubectl get pod httpd-pod -o yaml | grep -A6 resources

You should see:
Limits:
  cpu: 100m
  memory: 20Mi
Requests:
  cpu: 100m
  memory: 15Mi

